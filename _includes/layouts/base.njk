<!doctype html>
<html lang="{{ metadata.language }}">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title or metadata.title }}</title>
    <meta name="description" content="{{ description or metadata.description }}">
    <meta
    name="theme-color" content="#1e456e"/> {#- Atom and JSON feeds included by default #}
    <link rel="alternate" href="/feed/feed.xml" type="application/atom+xml" title="{{ metadata.title }}">
    <link rel="alternate" href="/feed/feed.json" type="application/json" title="{{ metadata.title }}">
    <link rel="apple-touch-icon" href="/images/icon-192x192.png"/>
    <link
    rel="manifest" href="manifest.json"> {#- Learn more about bundles: https://github.com/11ty/eleventy-plugin-bundle #}
    <link
    rel="stylesheet" media="screen" href="/css/index.css"/> {# add prism.js stylesheets unconditionally #}
    <link rel="stylesheet" media="screen" href="/css/prism-solarizedlight.css"/>
    <link
    rel="stylesheet" media="screen" href="/css/prism-diff.css"/>
    {# Only load Mavo if instructed to do so in the post's front matter #}
    {% if mavo %}
      <link rel="stylesheet" href="https://get.mavo.io/mavo.css"/>
      <script src="https://get.mavo.io/mavo.js"></script>
    {% endif %}
    {# Only load lite-vimeo if instructed to do so in the post's front matter #}
    {% if vimeo %}
      <script defer type="module" src="https://cdn.jsdelivr.net/npm/@slightlyoff/lite-vimeo@0.1.1/lite-vimeo.js"></script>
    {% endif %}
    {# Only load lite-youtube if instructed to do so in the post's front matter #}
    {% if youtube %}
      <link rel="stylesheet" href="/css/lite-yt-embed.css"/>
      <script defer src="/js/lite-yt-embed.js"></script>
    {% endif %}
    {# Only load mermaid if instructed to do so in the post's front matter #}
    {% if mermaid %}
      {% mermaid_js %}
    {% endif %}
  </head>
  <body>
    <a href="#skip" class="visually-hidden">Skip to main content</a>
    <div class="grid-container">
      <img
        class="full-bleed-header"
        fetchpriority="high"
        decoding="async"
        src="/images/cropped-Long_Room_Interior_Trinity_College_Dublin_Ireland.webp"
        alt="Dublin Library"
        width="1564"
        height="389"/>
      <header>
        <h1>
          <a href="/" class="home-link">{{ metadata.title }}</a>
        </h1>
        {#- Read more about `eleventy-navigation` at https://www.11ty.dev/docs/plugins/navigation/ #}
      </header>
      <nav id="nav-top-menu-container">
				{% import "_nav.njk" as nav with context %}
				<ul class="nav-top-menu">
					{{ nav.render(nav_links, "nav-top-menu-container") }}
				</ul>
			</nav>

      <main id="skip">
        {{ content | safe }}
      </main>
      {# {% include "footer.njk" %} #}
    </div>
    <!-- Current page: {{ page.url | htmlBaseUrl }} -->
    <!-- Configure and load Service Worker -->
    <script type="module">
      // This code sample uses features introduced in Workbox v6.
      import {Workbox} from 'https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-window.prod.mjs';
      if ('serviceWorker' in navigator) {
        const wb = new Workbox('/sw.js');
        let registration;
        const showSkipWaitingPrompt = async (event) => {
          // Assuming the user accepted the update, set up a listener that will reload the page as soon as the previously waiting
          // service worker has taken control.
          wb.addEventListener('controlling', () => {
            // At this point, reloading will ensure that the current tab is loaded under the control of the new service worker.
            // Depending on your web app, you may want to auto-save or persist transient state before triggering the reload.
            window.location.reload();
          });
          // When `event.wasWaitingBeforeRegister` is true, a previously updated service worker is still waiting. You may want to
          // customize the UI prompt accordingly. This code assumes your app has a promptForUpdate() method, which returns true if
          // the user wants to update. Implementing this is app-specific; some examples are:
          // https://open-ui.org/components/alert.research or https://open-ui.org/components/toast.research
          const updateAccepted = await confirm('Reload window?');
          if (updateAccepted) {
            wb.messageSkipWaiting();
          }
        };
        // Add an event listener to detect when the registered service worker has installed but is waiting to activate.
        wb.addEventListener('waiting', (event) => {
          showSkipWaitingPrompt(event);
        });
        wb.register();
      }
    </script>
  </body>
</html>
